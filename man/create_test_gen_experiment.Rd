% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/create_test_gen_experiment.R
\name{create_test_gen_experiment}
\alias{create_test_gen_experiment}
\title{Create a valid testing \link{pirouette} generative experiment.}
\usage{

  create_test_gen_experiment(inference_conditions = create_inference_conditions(),
  inference_model = beautier::create_test_inference_model(),
  beast2_options = beastier::create_beast2_options(),
  est_evidence_mcmc = beautier::create_test_ns_mcmc(),
  beast2_bin_path = beastier::get_default_beast2_bin_path(),
  errors_filename = tempfile(pattern = "errors_", tmpdir =
  rappdirs::user_cache_dir(), fileext = ".csv"))
}
\arguments{
\item{inference_conditions}{conditions under which the inference model
is used in the inference}

\item{inference_model}{an inference model, which is a combination
of site model, clock model, tree prior and BEAST2 input and
input filenames.}

\item{beast2_options}{BEAST2 options,
as can be created by \link[beastier]{create_beast2_options}}

\item{est_evidence_mcmc}{MCMC used in the estimation of
the evidence (aka marginal likelihood).
The MCMC must be a Nested Sampling MCMC,
as can be created by \link[beautier]{create_nested_sampling_mcmc}.}

\item{beast2_bin_path}{path to BEAST2 binary file. The use of the
binary BEAST2 file is required for estimation of the evidence (aka
marginal likelihood). The default BEAST2 binary path can be
obtained using \link[beastier]{get_default_beast2_bin_path}}

\item{errors_filename}{baseline name for errors filenames}
}
\value{
a \link{pirouette} experiment.
}
\description{
Create a valid testing \link{pirouette} generative experiment.
}
\examples{
 library(testthat)

 # Create a testing candidate experiment
 if (rappdirs::app_dir()$os != "win") {
 experiment <- create_test_cand_experiment()
 expect_true("inference_conditions" \%in\% names(experiment))
 expect_true("inference_model" \%in\% names(experiment))
 expect_true("beast2_options" \%in\% names(experiment))
 expect_true("est_evidence_mcmc" \%in\% names(experiment))
 expect_true("beast2_bin_path" \%in\% names(experiment))
 expect_silent(check_experiment(experiment))
 }

 # Create a testing generative experiment
 experiment <- create_test_gen_experiment()
 expect_true("inference_conditions" \%in\% names(experiment))
 expect_true("inference_model" \%in\% names(experiment))
 expect_true("beast2_options" \%in\% names(experiment))
 expect_true("est_evidence_mcmc" \%in\% names(experiment))
 expect_true("beast2_bin_path" \%in\% names(experiment))
 expect_silent(check_experiment(experiment))

 # Use the generative experiment
 # to create the full pirouette parameter set
 pir_params <- create_pir_params(
   alignment_params = create_test_alignment_params(),
   experiments = list(experiment)
 )

 # Run that experiment on a continuous integration service,
 # only when BEAST2 is unstalled
 if (rappdirs::app_dir()$os != "win" &&
   is_on_ci() &&
   is_beast2_installed()
 ) {
   pir_out <- pir_run(
     phylogeny = ape::read.tree(text = "((A:2, B:2):1, C:3);"),
     pir_params = pir_params
   )
   pir_plot(pir_out)
 }
}
\author{
RichÃ¨l J.C. Bilderbeek
}
